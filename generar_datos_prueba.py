#!/usr/bin/env python3
"""
Script para generar datos de prueba realistas:
- 10 clientes variados
- 20 personas (periodistas y equipo)
- Proyectos m√∫ltiples por cliente
- Horas registradas en los √∫ltimos 3 meses
- Facturas asociadas a proyectos
"""

from app import app, db, Persona, Cliente, Proyecto, AsignacionProyecto, RegistroHora, Factura, Servicio, ValorUF
from datetime import datetime, timedelta
import random

def limpiar_base_datos():
    """Limpia todas las tablas"""
    print("üóëÔ∏è  Limpiando base de datos...")
    db.drop_all()
    db.create_all()
    print("‚úÖ Base de datos limpiada\n")

def crear_servicios():
    """Crea los servicios de Comsulting"""
    servicios_data = [
        ('Comunicaciones Externas', 'Externas'),
        ('Gesti√≥n de Crisis', 'Externas'),
        ('Talleres de vocer√≠a', 'Externas'),
        ('Monitoreo de medios', 'Externas'),
        ('Comunicaciones Internas', 'Internas'),
        ('Cultura organizacional', 'Internas'),
        ('Asuntos P√∫blicos', 'Asuntos P√∫blicos'),
        ('Relaciones gubernamentales', 'Asuntos P√∫blicos'),
        ('Estrategia y gesti√≥n de redes', 'Redes sociales'),
        ('Monitoreo digital', 'Redes sociales'),
        ('Community management', 'Redes sociales'),
        ('Dise√±o gr√°fico', 'Dise√±o'),
        ('Dise√±o web', 'Dise√±o'),
        ('Producci√≥n audiovisual', 'Dise√±o'),
    ]

    print("üìã Creando servicios...")
    for nombre, area in servicios_data:
        servicio = Servicio(nombre=nombre, area=area)
        db.session.add(servicio)

    db.session.commit()
    print(f"‚úÖ {len(servicios_data)} servicios creados\n")

def crear_personas():
    """Crea 20 personas del equipo"""
    personas_data = [
        # Socios
        ('Mar√≠a Gonz√°lez', 'maria.gonzalez@comsulting.cl', 'Socia', 'full-time', 'Externas', 3.5, 150),
        ('Roberto Silva', 'roberto.silva@comsulting.cl', 'Socio', 'full-time', 'Asuntos P√∫blicos', 3.5, 150),

        # Directores
        ('Carmen L√≥pez', 'carmen.lopez@comsulting.cl', 'Directora', 'full-time', 'Externas', 2.8, 120),
        ('Fernando Rojas', 'fernando.rojas@comsulting.cl', 'Director', 'full-time', 'Internas', 2.8, 120),
        ('Patricia Mendoza', 'patricia.mendoza@comsulting.cl', 'Directora', 'full-time', 'Redes sociales', 2.5, 110),

        # Consultores Senior
        ('Juan P√©rez', 'juan.perez@comsulting.cl', 'Consultor Senior', 'full-time', 'Externas', 2.0, 85),
        ('Ana Mart√≠nez', 'ana.martinez@comsulting.cl', 'Consultora Senior', 'full-time', 'Externas', 1.9, 82),
        ('Diego Torres', 'diego.torres@comsulting.cl', 'Consultor Senior', 'full-time', 'Asuntos P√∫blicos', 2.0, 85),
        ('Sof√≠a Vargas', 'sofia.vargas@comsulting.cl', 'Consultora Senior', 'full-time', 'Internas', 1.8, 80),

        # Consultores
        ('Andr√©s Contreras', 'andres.contreras@comsulting.cl', 'Consultor', 'full-time', 'Externas', 1.5, 65),
        ('Valentina Soto', 'valentina.soto@comsulting.cl', 'Consultora', 'full-time', 'Externas', 1.5, 65),
        ('Crist√≥bal Mu√±oz', 'cristobal.munoz@comsulting.cl', 'Consultor', 'full-time', 'Internas', 1.4, 62),
        ('Francisca Ram√≠rez', 'francisca.ramirez@comsulting.cl', 'Consultora', 'full-time', 'Redes sociales', 1.6, 68),
        ('Mat√≠as Herrera', 'matias.herrera@comsulting.cl', 'Consultor', 'full-time', 'Asuntos P√∫blicos', 1.5, 65),

        # Analistas
        ('Javiera Castro', 'javiera.castro@comsulting.cl', 'Analista', 'full-time', 'Externas', 1.2, 52),
        ('Benjam√≠n Vera', 'benjamin.vera@comsulting.cl', 'Analista', 'full-time', 'Redes sociales', 1.2, 52),
        ('Isidora Parra', 'isidora.parra@comsulting.cl', 'Analista', 'full-time', 'Internas', 1.1, 50),

        # Dise√±o
        ('Luis Torres', 'luis.torres@comsulting.cl', 'Designer Senior', 'full-time', 'Dise√±o', 1.8, 78),
        ('Camila Espinoza', 'camila.espinoza@comsulting.cl', 'Designer', 'full-time', 'Dise√±o', 1.4, 60),

        # Media jornada
        ('Paula N√∫√±ez', 'paula.nunez@comsulting.cl', 'Consultora', 'media-jornada', 'Externas', 1.5, 65),
    ]

    print("üë• Creando equipo de 20 personas...")
    for nombre, email, cargo, jornada, area, costo, sueldo in personas_data:
        persona = Persona(
            nombre=nombre,
            email=email,
            cargo=cargo,
            tipo_jornada=jornada,
            area=area,
            costo_hora=costo,
            sueldo_mensual=sueldo
        )
        db.session.add(persona)

    db.session.commit()
    print(f"‚úÖ {len(personas_data)} personas creadas\n")

def crear_clientes():
    """Crea 10 clientes variados"""
    clientes_data = [
        ('Banco Nacional', 'permanente', 'Externas'),
        ('Minera del Norte', 'permanente', 'Externas'),
        ('Retail Plus', 'permanente', 'Externas'),
        ('Compa√±√≠a El√©ctrica', 'permanente', 'Asuntos P√∫blicos'),
        ('Municipalidad Central', 'permanente', 'Internas'),
        ('Startup Tech', 'spot', 'Redes sociales'),
        ('Inmobiliaria Global', 'spot', 'Externas'),
        ('ONG Ambiental', 'spot', 'Asuntos P√∫blicos'),
        ('Universidad del Sur', 'permanente', 'Internas'),
        ('Comsulting', 'permanente', 'Dise√±o'),
    ]

    print("üè¢ Creando 10 clientes...")
    fecha_base = datetime.now().date() - timedelta(days=365)

    for nombre, tipo, area in clientes_data:
        cliente = Cliente(
            nombre=nombre,
            tipo=tipo,
            area=area,
            fecha_inicio=fecha_base + timedelta(days=random.randint(0, 180))
        )
        db.session.add(cliente)

    db.session.commit()
    print(f"‚úÖ {len(clientes_data)} clientes creados\n")

def crear_proyectos():
    """Crea 2-3 proyectos por cliente"""
    proyectos_config = [
        # Banco Nacional
        ('Banco Nacional', [
            ('Campa√±a Digital 2025', 'Comunicaciones Externas', 450, 18),
            ('Crisis Reputacional', 'Gesti√≥n de Crisis', 200, 12),
            ('Redes Sociales Corporativas', 'Estrategia y gesti√≥n de redes', 180, 20)
        ]),
        # Minera del Norte
        ('Minera del Norte', [
            ('Relaciones Comunitarias', 'Comunicaciones Externas', 380, 15),
            ('Asuntos Ind√≠genas', 'Asuntos P√∫blicos', 250, 14)
        ]),
        # Retail Plus
        ('Retail Plus', [
            ('Black Friday Campaign', 'Estrategia y gesti√≥n de redes', 320, 22),
            ('Comunicaciones Internas', 'Comunicaciones Internas', 150, 16)
        ]),
        # Compa√±√≠a El√©ctrica
        ('Compa√±√≠a El√©ctrica', [
            ('Lobby Regulatorio', 'Asuntos P√∫blicos', 400, 13),
            ('Crisis Medioambiental', 'Gesti√≥n de Crisis', 280, 10)
        ]),
        # Municipalidad Central
        ('Municipalidad Central', [
            ('Plan de Comunicaciones 2025', 'Comunicaciones Internas', 220, 17),
            ('Participaci√≥n Ciudadana', 'Comunicaciones Externas', 190, 15)
        ]),
        # Startup Tech
        ('Startup Tech', [
            ('Lanzamiento Producto', 'Estrategia y gesti√≥n de redes', 150, 25),
        ]),
        # Inmobiliaria Global
        ('Inmobiliaria Global', [
            ('Gesti√≥n de Crisis Legal', 'Gesti√≥n de Crisis', 180, 11),
            ('Campa√±a Nuevo Proyecto', 'Comunicaciones Externas', 200, 19)
        ]),
        # ONG Ambiental
        ('ONG Ambiental', [
            ('Campa√±a COP30', 'Asuntos P√∫blicos', 160, 14),
        ]),
        # Universidad del Sur
        ('Universidad del Sur', [
            ('Comunicaciones Internas', 'Comunicaciones Internas', 240, 16),
            ('Posicionamiento Digital', 'Estrategia y gesti√≥n de redes', 180, 20)
        ]),
        # Comsulting
        ('Comsulting', [
            ('Dise√±o Corporativo 2025', 'Dise√±o gr√°fico', 120, 18),
        ])
    ]

    print("üìÅ Creando proyectos m√∫ltiples por cliente...")
    total_proyectos = 0

    for nombre_cliente, proyectos in proyectos_config:
        cliente = Cliente.query.filter_by(nombre=nombre_cliente).first()

        for i, (nombre_proy, servicio_nombre, presupuesto, margen) in enumerate(proyectos, 1):
            servicio = Servicio.query.filter_by(nombre=servicio_nombre).first()

            # Generar c√≥digo √∫nico usando ID del cliente
            codigo = f"{cliente.nombre[:3].upper().replace(' ', '')}-{cliente.id:02d}-{i:02d}"

            fecha_inicio = datetime.now().date() - timedelta(days=random.randint(60, 150))
            fecha_fin = fecha_inicio + timedelta(days=random.randint(90, 270))

            # Determinar estado seg√∫n fecha
            hoy = datetime.now().date()
            if fecha_fin < hoy:
                estado = 'cerrado'
            elif random.random() < 0.1:
                estado = 'pausado'
            else:
                estado = 'activo'

            proyecto = Proyecto(
                cliente_id=cliente.id,
                nombre=nombre_proy,
                codigo=codigo,
                servicio_id=servicio.id if servicio else None,
                tipo=cliente.tipo,
                fecha_inicio=fecha_inicio,
                fecha_fin=fecha_fin,
                presupuesto_uf=presupuesto,
                estado=estado,
                descripcion=f"Proyecto de {servicio_nombre} para {cliente.nombre}",
                margen_objetivo=margen
            )
            db.session.add(proyecto)
            total_proyectos += 1

    db.session.commit()
    print(f"‚úÖ {total_proyectos} proyectos creados\n")

def asignar_personas_proyectos():
    """Asigna personas a proyectos seg√∫n √°rea"""
    print("üë• Asignando personas a proyectos...")
    proyectos = Proyecto.query.all()
    total_asignaciones = 0

    for proyecto in proyectos:
        # Determinar √°rea del proyecto
        area_proyecto = proyecto.cliente.area

        # Obtener personas del √°rea
        personas_area = Persona.query.filter_by(area=area_proyecto, activo=True).all()

        # Asignar l√≠der (Socio o Director)
        lideres = [p for p in personas_area if 'Socio' in p.cargo or 'Director' in p.cargo]
        if lideres:
            lider = random.choice(lideres)
            asignacion = AsignacionProyecto(
                persona_id=lider.id,
                proyecto_id=proyecto.id,
                rol_proyecto='lider',
                horas_estimadas=random.uniform(30, 80),
                costo_hora_proyecto=lider.costo_hora,
                fecha_inicio=proyecto.fecha_inicio,
                activo=True
            )
            db.session.add(asignacion)
            total_asignaciones += 1

        # Asignar 2-4 colaboradores
        num_colaboradores = random.randint(2, 4)
        colaboradores = [p for p in personas_area if 'Consultor' in p.cargo or 'Analista' in p.cargo]

        if colaboradores:
            for persona in random.sample(colaboradores, min(num_colaboradores, len(colaboradores))):
                asignacion = AsignacionProyecto(
                    persona_id=persona.id,
                    proyecto_id=proyecto.id,
                    rol_proyecto='colaborador',
                    horas_estimadas=random.uniform(40, 120),
                    costo_hora_proyecto=persona.costo_hora,
                    fecha_inicio=proyecto.fecha_inicio,
                    activo=True
                )
                db.session.add(asignacion)
                total_asignaciones += 1

        # Si hay dise√±adores y el proyecto lo requiere, asignar
        if random.random() < 0.3:
            disenadores = Persona.query.filter_by(area='Dise√±o', activo=True).all()
            if disenadores:
                disenador = random.choice(disenadores)
                asignacion = AsignacionProyecto(
                    persona_id=disenador.id,
                    proyecto_id=proyecto.id,
                    rol_proyecto='soporte',
                    horas_estimadas=random.uniform(20, 50),
                    costo_hora_proyecto=disenador.costo_hora,
                    fecha_inicio=proyecto.fecha_inicio,
                    activo=True
                )
                db.session.add(asignacion)
                total_asignaciones += 1

    db.session.commit()
    print(f"‚úÖ {total_asignaciones} asignaciones creadas\n")

def registrar_horas():
    """Registra horas para los √∫ltimos 90 d√≠as"""
    print("‚è∞ Registrando horas de los √∫ltimos 90 d√≠as...")
    proyectos = Proyecto.query.all()
    total_horas_registradas = 0

    for proyecto in proyectos:
        asignaciones = AsignacionProyecto.query.filter_by(proyecto_id=proyecto.id, activo=True).all()

        # Determinar d√≠as a registrar
        dias_proyecto = (proyecto.fecha_fin - proyecto.fecha_inicio).days
        dias_registro = min(90, dias_proyecto)

        for asignacion in asignaciones:
            persona = asignacion.persona

            # Calcular horas diarias aproximadas
            if persona.tipo_jornada == 'full-time':
                horas_dia_base = 6
            else:
                horas_dia_base = 3

            # Registrar horas aleatorias en d√≠as laborales
            for i in range(dias_registro):
                fecha = proyecto.fecha_inicio + timedelta(days=i)

                # Solo d√≠as laborales
                if fecha.weekday() < 5:
                    # No todos los d√≠as trabajan en todos los proyectos
                    if random.random() < 0.7:
                        horas = round(random.uniform(horas_dia_base * 0.5, horas_dia_base * 1.5), 1)

                        hora = RegistroHora(
                            persona_id=persona.id,
                            cliente_id=proyecto.cliente_id,
                            proyecto_id=proyecto.id,
                            fecha=fecha,
                            horas=horas,
                            descripcion=f"Trabajo en {proyecto.nombre}"
                        )
                        db.session.add(hora)
                        total_horas_registradas += horas

    db.session.commit()
    print(f"‚úÖ {total_horas_registradas:.1f} horas registradas\n")

def crear_facturas():
    """Crea facturas para los proyectos"""
    print("üí∞ Creando facturas por proyecto...")
    proyectos = Proyecto.query.all()
    total_facturas = 0

    for proyecto in proyectos:
        # Determinar n√∫mero de facturas seg√∫n duraci√≥n
        duracion_meses = max(1, (proyecto.fecha_fin - proyecto.fecha_inicio).days // 30)
        num_facturas = min(duracion_meses, random.randint(1, 4))

        # Calcular monto base de factura
        if proyecto.presupuesto_uf:
            monto_base = proyecto.presupuesto_uf / num_facturas
        else:
            monto_base = random.uniform(50, 200)

        for i in range(num_facturas):
            fecha_factura = proyecto.fecha_inicio + timedelta(days=30 * (i + 1))

            # A√±adir variaci√≥n al monto
            monto = round(monto_base * random.uniform(0.8, 1.2), 2)

            factura = Factura(
                cliente_id=proyecto.cliente_id,
                proyecto_id=proyecto.id,
                numero=f"F-{proyecto.codigo}-{i+1:02d}",
                fecha=fecha_factura,
                monto_uf=monto,
                pagada=fecha_factura < datetime.now().date()
            )
            db.session.add(factura)
            total_facturas += 1

    db.session.commit()
    print(f"‚úÖ {total_facturas} facturas creadas\n")

def crear_valor_uf():
    """Crea valor UF actual"""
    uf = ValorUF(
        fecha=datetime.now().date(),
        valor=37500
    )
    db.session.add(uf)
    db.session.commit()
    print("‚úÖ Valor UF establecido: $37,500\n")

def generar_reporte():
    """Genera reporte de datos creados"""
    print("=" * 80)
    print("üìä RESUMEN DE DATOS GENERADOS")
    print("=" * 80)

    print(f"\nüë• Personas: {Persona.query.count()}")
    print(f"   ‚Ä¢ Socios: {Persona.query.filter(Persona.cargo.like('%Socio%')).count()}")
    print(f"   ‚Ä¢ Directores: {Persona.query.filter(Persona.cargo.like('%Director%')).count()}")
    print(f"   ‚Ä¢ Consultores: {Persona.query.filter(Persona.cargo.like('%Consultor%')).count()}")
    print(f"   ‚Ä¢ Analistas: {Persona.query.filter(Persona.cargo.like('%Analista%')).count()}")
    print(f"   ‚Ä¢ Dise√±adores: {Persona.query.filter(Persona.cargo.like('%Designer%')).count()}")

    print(f"\nüè¢ Clientes: {Cliente.query.count()}")
    print(f"   ‚Ä¢ Permanentes: {Cliente.query.filter_by(tipo='permanente').count()}")
    print(f"   ‚Ä¢ Spot: {Cliente.query.filter_by(tipo='spot').count()}")

    print(f"\nüìÅ Proyectos: {Proyecto.query.count()}")
    print(f"   ‚Ä¢ Activos: {Proyecto.query.filter_by(estado='activo').count()}")
    print(f"   ‚Ä¢ Pausados: {Proyecto.query.filter_by(estado='pausado').count()}")
    print(f"   ‚Ä¢ Cerrados: {Proyecto.query.filter_by(estado='cerrado').count()}")

    print(f"\nüë• Asignaciones: {AsignacionProyecto.query.count()}")

    total_horas = db.session.query(db.func.sum(RegistroHora.horas)).scalar() or 0
    print(f"\n‚è∞ Horas Registradas: {total_horas:.1f}h")

    total_facturas_uf = db.session.query(db.func.sum(Factura.monto_uf)).scalar() or 0
    print(f"\nüí∞ Facturaci√≥n Total: {total_facturas_uf:.2f} UF (${total_facturas_uf * 37500:,.0f})")
    print(f"   ‚Ä¢ N√∫mero de facturas: {Factura.query.count()}")

    print("\n" + "=" * 80)
    print("‚úÖ DATOS DE PRUEBA GENERADOS EXITOSAMENTE")
    print("=" * 80)
    print("\nüöÄ Inicia la aplicaci√≥n con: python app.py")
    print("üìä Accede a: http://localhost:5000")
    print("\n")

def main():
    with app.app_context():
        print("\n" + "=" * 80)
        print("üé≤ GENERADOR DE DATOS DE PRUEBA - COMSULTING")
        print("=" * 80)
        print("\nEste script crear√°:")
        print("  ‚Ä¢ 10 clientes variados")
        print("  ‚Ä¢ 20 personas (periodistas y equipo)")
        print("  ‚Ä¢ ~20 proyectos (2-3 por cliente)")
        print("  ‚Ä¢ Asignaciones persona-proyecto")
        print("  ‚Ä¢ ~3 meses de horas registradas")
        print("  ‚Ä¢ Facturas por proyecto")
        print("\n")

        respuesta = input("¬øDeseas continuar? (s/n): ")

        if respuesta.lower() != 's':
            print("\n‚ùå Operaci√≥n cancelada.\n")
            return

        print("\n")
        limpiar_base_datos()
        crear_servicios()
        crear_personas()
        crear_clientes()
        crear_proyectos()
        asignar_personas_proyectos()
        registrar_horas()
        crear_facturas()
        crear_valor_uf()
        generar_reporte()

if __name__ == '__main__':
    main()
