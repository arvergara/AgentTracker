"""
Script para configurar la jerarqu√≠a organizacional seg√∫n el organigrama Oct 2025

Este script:
1. Marca a Blanca Bulnes, Macarena Puigrred√≥n y Jazm√≠n Sapunar como administradoras (es_admin=True)
2. Asigna las relaciones de reporte (reporte_a_id) seg√∫n la p√°gina 3 del organigrama

Reglas de permisos:
- Admin (es_admin=True): Ven TODO
- Socios/Directores: Solo ven a sus reportes DIRECTOS
- Resto: Solo ven su propia informaci√≥n
"""

from app import app, db, Persona

def configurar_jerarquia():
    """Configura la jerarqu√≠a seg√∫n organigrama Oct 2025"""

    with app.app_context():
        print("="*80)
        print("CONFIGURACI√ìN DE JERARQU√çA ORGANIZACIONAL")
        print("="*80)

        # Paso 1: Marcar administradores
        print("\n1. CONFIGURANDO ADMINISTRADORES (acceso total)")
        print("-"*80)

        admins_emails = [
            'bbulnes@comsulting.cl',        # Blanca Bulnes - Gerenta General
            'mpuigrredon@comsulting.cl',    # Macarena Puigrred√≥n - Socia Ejecutiva
            'jsapunar@comsulting.cl',       # Jazm√≠n Sapunar - Admin y Finanzas
        ]

        # Primero, quitar permisos de admin a todos
        Persona.query.update({'es_admin': False})
        db.session.commit()

        for email in admins_emails:
            persona = Persona.query.filter_by(email=email).first()
            if persona:
                persona.es_admin = True
                print(f"‚úì Admin: {persona.nombre:40} ({email})")
            else:
                print(f"‚úó NO ENCONTRADO: {email}")

        db.session.commit()

        # Paso 2: Configurar relaciones de reporte seg√∫n organigrama p√°gina 3
        print("\n2. CONFIGURANDO RELACIONES DE REPORTE")
        print("-"*80)

        # Limpiar todas las relaciones primero
        Persona.query.update({'reporte_a_id': None})
        db.session.commit()

        def buscar_persona(nombre_parcial):
            """Busca persona por nombre parcial"""
            partes = nombre_parcial.strip().split()
            query = Persona.query
            for parte in partes:
                query = query.filter(Persona.nombre.ilike(f'%{parte}%'))
            return query.first()

        def asignar_supervisor(subordinado_nombre, supervisor_nombre):
            """Asigna supervisor a un subordinado"""
            subordinado = buscar_persona(subordinado_nombre)
            supervisor = buscar_persona(supervisor_nombre)

            if subordinado and supervisor:
                subordinado.reporte_a_id = supervisor.id
                print(f"  ‚Ä¢ {subordinado.nombre:35} ‚Üí {supervisor.nombre}")
                return True
            else:
                if not subordinado:
                    print(f"  ‚úó NO ENCONTRADO: {subordinado_nombre}")
                if not supervisor:
                    print(f"  ‚úó SUPERVISOR NO ENCONTRADO: {supervisor_nombre}")
                return False

        # Reportes a BLANCA BULNES
        print("\nReportan a BLANCA BULNES:")
        asignar_supervisor("Josefa Arraztoa", "Blanca Bulnes")
        asignar_supervisor("Sof√≠a Mart√≠nez", "Blanca Bulnes")
        asignar_supervisor("Andr√©s Az√≥car", "Blanca Bulnes")
        asignar_supervisor("Jos√© Manuel Valdivieso", "Blanca Bulnes")

        # Reportes a MACARENA PUIGRRED√ìN
        print("\nReportan a MACARENA PUIGRRED√ìN:")
        asignar_supervisor("Luisa Mendoza", "Macarena Puigrredon")
        asignar_supervisor("Mariela Moyano", "Macarena Puigrredon")
        asignar_supervisor("Kaenia Berenguel", "Macarena Puigrredon")
        asignar_supervisor("Christian Orrego", "Macarena Puigrredon")
        asignar_supervisor("Hern√°n D√≠az", "Macarena Puigrredon")
        asignar_supervisor("Pedro Pablo Thies", "Macarena Puigrredon")
        asignar_supervisor("Ignacio Diaz", "Macarena Puigrredon")
        asignar_supervisor("Francisca Carlino", "Macarena Puigrredon")
        asignar_supervisor("Leonardo Pezoa", "Macarena Puigrredon")

        # Reportes a BERNARDITA OCHAGAV√çA
        print("\nReportan a BERNARDITA OCHAGAV√çA:")
        asignar_supervisor("Carolina Rodr√≠guez", "Bernardita Ochagavia")
        asignar_supervisor("Isidora Bello", "Bernardita Ochagavia")
        asignar_supervisor("Janett Poblete", "Bernardita Ochagavia")
        asignar_supervisor("Roc√≠o Romero", "Bernardita Ochagavia")
        asignar_supervisor("Aranza Fern√°ndez", "Bernardita Ochagavia")

        # Reportes a CAROLINA ROMERO
        print("\nReportan a CAROLINA ROMERO:")
        asignar_supervisor("√Ångeles P√©rez", "Carolina Romero")
        asignar_supervisor("Constanza P√©rez-Cueto", "Carolina Romero")
        asignar_supervisor("Victor Guillou", "Carolina Romero")
        asignar_supervisor("Enrique Elgueta", "Carolina Romero")

        # Reportes a NICOL√ÅS MARTICORENA
        print("\nReportan a NICOL√ÅS MARTICORENA:")
        asignar_supervisor("Andrea Tapia", "Nicol√°s Marticorena")
        asignar_supervisor("Carla Borja", "Nicol√°s Marticorena")
        asignar_supervisor("Nidia Millahueique", "Nicol√°s Marticorena")
        asignar_supervisor("Pilar Gordillo", "Nicol√°s Marticorena")
        asignar_supervisor("Liliana Cortes", "Nicol√°s Marticorena")

        # Reportes a ISABEL ESPINOZA
        print("\nReportan a ISABEL ESPINOZA:")
        asignar_supervisor("Ignacio Echeverr√≠a", "Isabel Espinoza")
        asignar_supervisor("Anais Sarmiento", "Isabel Espinoza")

        # Reportes a JOS√â MANUEL VALDIVIESO (aunque √©l reporta a Blanca, tiene subordinados)
        print("\nReportan a JOS√â MANUEL VALDIVIESO:")
        asignar_supervisor("Ignacio Echeverr√≠a", "Jos√© Manuel Valdivieso")  # Tambi√©n reporta aqu√≠ seg√∫n org.
        asignar_supervisor("Anais Sarmiento", "Jos√© Manuel Valdivieso")

        db.session.commit()

        # Paso 3: Resumen y verificaci√≥n
        print("\n" + "="*80)
        print("RESUMEN DE CONFIGURACI√ìN")
        print("="*80)

        # Administradores
        admins = Persona.query.filter_by(es_admin=True).all()
        print(f"\nüìã Administradores (acceso total): {len(admins)}")
        for admin in admins:
            print(f"  ‚Ä¢ {admin.nombre:40} - {admin.email}")

        # Supervisores (personas con subordinados)
        supervisores = Persona.query.filter(Persona.subordinados.any()).all()
        print(f"\nüëî Supervisores (con reportes directos): {len(supervisores)}")
        for sup in supervisores:
            subordinados = Persona.query.filter_by(reporte_a_id=sup.id, activo=True).all()
            print(f"\n  {sup.nombre} ({len(subordinados)} subordinados):")
            for sub in subordinados:
                print(f"    ‚Üí {sub.nombre}")

        # Personas sin supervisor (adem√°s de los admin)
        sin_supervisor = Persona.query.filter_by(reporte_a_id=None, activo=True).filter_by(es_admin=False).all()
        if sin_supervisor:
            print(f"\n‚ö†Ô∏è  Personas SIN supervisor asignado (adem√°s de admins): {len(sin_supervisor)}")
            for persona in sin_supervisor:
                print(f"  ‚Ä¢ {persona.nombre}")

        print("\n" + "="*80)
        print("‚úì CONFIGURACI√ìN COMPLETADA")
        print("="*80)

        # Ejemplos de permisos
        print("\nüìñ EJEMPLOS DE PERMISOS:")
        print("-"*80)

        # Ejemplo 1: Bernardita
        bernardita = Persona.query.filter(Persona.nombre.ilike('%Bernardita%')).first()
        if bernardita:
            print(f"\n{bernardita.nombre}:")
            print(f"  - Es admin: {bernardita.es_admin}")
            print(f"  - Puede ver a:")
            for pid in bernardita.obtener_personas_visibles():
                p = Persona.query.get(pid)
                if p:
                    print(f"    ‚Ä¢ {p.nombre}")

        # Ejemplo 2: Carolina Rodr√≠guez (subordinada de Bernardita)
        carolina_rod = Persona.query.filter(Persona.nombre.ilike('%Carolina Rodr√≠guez%')).first()
        if carolina_rod:
            print(f"\n{carolina_rod.nombre}:")
            print(f"  - Es admin: {carolina_rod.es_admin}")
            print(f"  - Reporta a: {carolina_rod.supervisor.nombre if carolina_rod.supervisor else 'Nadie'}")
            print(f"  - Puede ver a:")
            for pid in carolina_rod.obtener_personas_visibles():
                p = Persona.query.get(pid)
                if p:
                    print(f"    ‚Ä¢ {p.nombre}")

        print("\n" + "="*80)

if __name__ == '__main__':
    configurar_jerarquia()
